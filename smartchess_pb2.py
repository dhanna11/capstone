# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: smartchess.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='smartchess.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10smartchess.proto\"%\n\rSensorRequest\x12\x14\n\x0csensorValues\x18\x01 \x03(\x05\"\x1d\n\x0eSensorResponse\x12\x0b\n\x03\x61\x63k\x18\x01 \x01(\x05\x32\x41\n\nSensorRead\x12\x33\n\x0esendSensorData\x12\x0e.SensorRequest\x1a\x0f.SensorResponse\"\x00\x62\x06proto3')
)




_SENSORREQUEST = _descriptor.Descriptor(
  name='SensorRequest',
  full_name='SensorRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sensorValues', full_name='SensorRequest.sensorValues', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=57,
)


_SENSORRESPONSE = _descriptor.Descriptor(
  name='SensorResponse',
  full_name='SensorResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ack', full_name='SensorResponse.ack', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=88,
)

DESCRIPTOR.message_types_by_name['SensorRequest'] = _SENSORREQUEST
DESCRIPTOR.message_types_by_name['SensorResponse'] = _SENSORRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SensorRequest = _reflection.GeneratedProtocolMessageType('SensorRequest', (_message.Message,), dict(
  DESCRIPTOR = _SENSORREQUEST,
  __module__ = 'smartchess_pb2'
  # @@protoc_insertion_point(class_scope:SensorRequest)
  ))
_sym_db.RegisterMessage(SensorRequest)

SensorResponse = _reflection.GeneratedProtocolMessageType('SensorResponse', (_message.Message,), dict(
  DESCRIPTOR = _SENSORRESPONSE,
  __module__ = 'smartchess_pb2'
  # @@protoc_insertion_point(class_scope:SensorResponse)
  ))
_sym_db.RegisterMessage(SensorResponse)



_SENSORREAD = _descriptor.ServiceDescriptor(
  name='SensorRead',
  full_name='SensorRead',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=90,
  serialized_end=155,
  methods=[
  _descriptor.MethodDescriptor(
    name='sendSensorData',
    full_name='SensorRead.sendSensorData',
    index=0,
    containing_service=None,
    input_type=_SENSORREQUEST,
    output_type=_SENSORRESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SENSORREAD)

DESCRIPTOR.services_by_name['SensorRead'] = _SENSORREAD

# @@protoc_insertion_point(module_scope)
